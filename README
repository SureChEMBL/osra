                        OSRA: Optical Structure Recognition

							Igor Filippov, 2007-2008
							igorf@helix.nih.gov


Description:

OSRA is a utility designed to convert graphical representations of
chemical structures, as they appear in journal articles, patent documents,
textbooks, trade magazines etc., into SMILES (Simplified Molecular
Input Line Entry Specification - see http://en.wikipedia.org/wiki/SMILES ) - 
a computer recognizable molecular structure format.  OSRA can read a document 
in any of the over 90 graphical formats parseable by ImageMagick - including 
GIF, JPEG, PNG, TIFF, PDF, PS etc., and generate the SMILES representation of
the molecular structure images encountered within that document.

Note that any software designed for optical recognition is unlikely to
be perfect, and the output produced might, and probably will, contain
errors, so a curation by a human knowledgeable in chemical structures 
is highly recommended.

Source code and pre-compiled binaries (compiled with MinGW suite for
Windows platform) are available from:
http://cactus.nci.nih.gov/osra
http://osra.sf.net 
=============================================================================
Dependencies:

OSRA needs the following Open Source libraries installed:

- ImageMagick, image manipulation library, version 6.2.8 or later; 
if installing from RPM make sure you have the following packages:
	ImageMagick
	ImageMagick-devel
	ImageMagick-c++-devel
	ImageMagick-c++ 
http://www.imagemagick.com/

- POTRACE, vector tracing library, version 1.7 or later,
http://potrace.sourceforge.net/

- GOCR/JOCR, optical character recognition library, version 0.43 or later,
http://jocr.sourceforge.net/

- OCRAD, optical character recognition program, version 0.17,
http://www.gnu.org/software/ocrad/ocrad.html

- TCLAP, Templatized C++ Command Line Parser Library, version 1.1.0,
http://tclap.sourceforge.net/

- OpenBabel, open source chemistry toolbox, version 2.2.0 or later; 
if installing from RPM make sure you have the following packages:
	 openbabel 
	 openbabel-devel
http://openbabel.sourceforge.net/wiki/Main_Page

- OR alternatively you can use RDKit as the molecular builder back-end,
version Q32008_1  or later (svn snapshot recommended):
 http://www.rdkit.org/

=============================================================================
Other acknowledgements:

OSRA also makes use of the following software (you do not need to
install it separately, it's included in the distribution):

- ThinImage, C code from the article
  "Efficient Binary Image Thinning using Neighborhood Maps"
  by Joseph M. Cychosz, 3ksnn64@ecn.purdue.edu
  in "Graphics Gems IV", Academic Press, 1994
http://www.acm.org/pubs/tog/GraphicsGems/gemsiv/thin_image.c

- GREYCstoration, Anisotropic smoothing plugin,
http://www.greyc.ensicaen.fr/~dtschump/greycstoration/

- CImg, The C++ Template Image Processing Library,
http://cimg.sourceforge.net
=============================================================================
Compilation:

Unpack downloaded source code for the OCRAD package. Do not compile or install it -
OSRA will automatically patch it and compile the object files it needs.
Compile and/or install all the other necessary dependencies.
Unpack OSRA package.
Edit the included Makefile to make sure you have the correct locations
for potrace, gocr, ocrad, openbabel (or rdkit), and tclap.
Check that Magick++-config  location (it's a script that
comes from ImageMagick installation) is in your PATH. You might have to set 
LD_LIBRARY_PATH=$(RDKIT)/bin when using RDKit, or /usr/local/bin when using
OpenBabel.
Set ARCH variable to one of the following: unix - for linux,unix,osx;
win32 - for building on Windows MinGW environment.
Set OPENBABEL_OR_RDKIT to either openbabel or rdkit depending on what toolkit you
have installed.
Running make should then generate the executable - osra.

For compiling with MinGW or Cygwin environment see more detailed
instructions at the end of this file.

Using OpenMP (EXPERIMENTAL):
For automatic resolution determination it is now possible to use parallel "for" loop
with OpenMP-aware compiler. Note that I have had mixed results with gcc OpenMP
implementation and cannot recommend it for OSRA other than as food for thought.
Sometimes the parallel version crashes, other times the results are different from
the serial version, yet other times it can be slower or faster than the serial version.
The problem could be with gcc OpenMP implementation, with the underlying libraries
(OpenBabel, ImageMagick, gocr etc.) or with OSRA itself. If you are able to figure it
out and to make it work reliably do let me know!
To use you need g++ version 4.1 or later. Uncomment "#include <omp.h>" line in
osra.cpp and add "-fopenmp" flag in the Makefile for both compiler and linker.
You will need to define environment variable OMP_NUM_THREADS to specify the number
of threads to run before using OSRA.
=============================================================================
Usage:

OSRA can process the following types of images:

- Computer-generated 2D structures, such as found on the PubChem website,
http://pubchem.ncbi.nlm.nih.gov/, black-and-white and color (use a
resolution of 72 dpi),

- Black-and-white PDF and PostScript files, including multi-page ones. Please
note that you need Ghostcript installed for ImageMagick to be able to
parse these kinds of files. OSRA internally renders PS and PDF at a resolution 
of 150 dpi, so you do not need to specify the resolution as a commmand-line parameter,

- Scanned images - black-and-white, a resolution of 300 dpi is recommended,
though 150 dpi can also produce fair results. Please make sure the
scanned image is of reasonable quality - an input that's too noisy will 
only generate garbage output.

Some common abbreviations, hetero atoms, fused and merged atomic
labels, hash and wedge bonds, and bridge bonds are currently
recognized. Formal charges, isotopes and some element
symbols, i.e. iodine ("I" -- looks too much like a straight line = single
bond), are not.


Command-line options: 
./osra --help 
will give you a list of available options with short descriptions.

Most common use: ./osra [-r <resolution>] <filename>

Resolution in dpi, default is "0" for automatic resolution
determination (NEW in version 0.9.6), unless it's a PS or PDF file as mentioned above. 
Filename is the name of your image file (or PS/PDF document).

Other options: 
-t, --threshold: Gray level threshold, default is 0.2
                 for black-and-white images, 

-n, --negate:    Inverts colors (for white on black images),

-o, --output:    Sets a prefix for writing recognized images to files - i.e.
                 "-o tmp" will create files tmp0.png, tmp1.png... for
                 each of the structures,

-s, --size:      Resize images on output - can be useful for running OSRA
                 as a backend for a webservice. Example: "-s 300x400".

-g,  --guess:    Prints out resolution guess when you chose to have automatic
     		 resolution estimate

-p,  --print:    Prints out the value of confidence function estimate


=============================================================================
Windows users:
You can download and use the zip archive with the pre-compiled binary.
The archive includes:
	osra.bat - Windows batch file, sets the environment and calls
	           osra.exe, 
	osra.exe - main executable. It is recommended that you use osra.bat
		   and not osra.exe directly,
	README.txt   - this file,
        delegates.xml - a configuration file for ImageMagick library,
        Read Image Document (OSRA).xml - a simple Scitegic Pipeline Pilot
	                                 component to read in an image
					 document using OSRA.
To use: 
Make sure you have installed Ghostscript (32-bit executable) and edit if
necessary osra.bat to have the correct PATH (by default it points to version
8.61). Run osra.bat with the same options as described above for the Linux
version. You can also run OSRA through Pipiline Pilot by using the included
protocol. It runs osra.bat on the client by default but it's trivial to
modify the component for "Run on Server" option.
============================================================================
LICENSE:

This program is free software; the part of the software that was written 
at the National Cancer Institute is in the public domain.  This does not
preclude, however, that components such as specific libraries used in the
software may be covered by specific licenses, including but not limited
to the GNU General Public License as published by the Free Software Foundation; 
either version 2 of the License, or (at your option) any later version; 
which may impose specific terms for redistribution or modification.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA. See also http://www.gnu.org/.

See the file COPYING for details.
====================================================================
Compiling OSRA on Windows systems:

It is possible to compile OSRA using either Cygwin or MinGW environment,
however it appears that Cygwin-compiled executable runs about two orders of
magnitude slower than a Linux version running on an equivalent class CPU.
Therefore it is strongly recommended NOT to use Cygwin to compile OSRA.

The instructions below are for MinGW environment.

Before you compile ImageMagick it is necessary to install the pre-requisite
libraries - zlib, bzip2, jasper (I was able to compile only version 1.701.0
and not the later 1.900.1), jbigkit, jpeg-6b, lcms, libpng, tiff.
You can read "ADD-ON LIBRARIES & PROGRAMS" for GraphicsMagick which
seems to apply to ImageMagick as well: http://www.graphicsmagick.org/www/README.html

Whenever "configure" script was available I used the following options:
./configure --disable-shared LDFLAGS=-L/usr/local/lib CPPFLAGS=-I/usr/local/include

To configure ImageMagick I used the following options:
./configure --disable-shared --without-threads --disable-openmp LDFLAGS=-L/usr/local/lib/ CPPFLAGS=-I/usr/local/include/

Compile and install ImageMagick, GOCR, Potrace, TCLAP.

To compile OpenBabel:
--- version 2.1.x ---
first edit obmolecformat.h to comment out lines
involving hash_map, as per instructions here:
http://www.bioinformatics.org/molekel/wiki/Main/OpenBabel

Run configure, make, make install. Compilation breaks at some point but not
before generating libopenbabel.a which is what we need. Check that
src/formats/obmolecformat.o and src/formats/cansmilesformat.o have also been
generated. If for some reason the latter is not present you can compile it with
the following commands:
cd src/formats/
g++ -DHAVE_CONFIG_H -I. -I../../src -I../../include -I../../data -I../../include -g -O2 -MT cansmilesformat.lo -MD -MP -MF .deps/cansmilesformat.Tpo -c cansmilesformat.cpp -o cansmilesformat.o

--- version 2.2.x ---
Run configure with the following options:
./configure --without-boost --disable-dynamic-modules --with-zlib=/usr/local/ CXX=g++-sjlj

Run make and make install. Compilation breaks for babel.exe but the library
libopenbabel-3.dll is generated. You need to keep this library with osra if
you plan on running osra on a different machine.
---------------------------

Compiling osra:
Edit the Makefile to set ARCH variable to win32 and OPENBABEL_OR_RDKIT to openbabel.
Running make should (hopefully) generate osra.exe. You're done!
Make sure you take a look at osra.bat to see that the environment is set
correctly. You will still need delegates.xml from ImageMagick installation
and a separately installed Ghostscript if you'd like to process PDF and
PostScript files.

Using OpenMP (EXPERIMENTAL):
For automatic resolution determination it is now possible to use parallel "for" loop
with OpenMP-aware compiler. Note that I have had mixed results with gcc OpenMP
implementation and cannot recommend it for OSRA other than as food for thought.
Sometimes the parallel version crashes, other times the results are different from
the serial version, yet other times it can be slower or faster than the serial version.
The problem could be with gcc OpenMP implementation, with the underlying libraries
(OpenBabel, ImageMagick, gocr etc.) or with OSRA itself. If you are able to figure it
out and to make it work reliably do let me know!
To use you need g++ version 4.1 or later. Uncomment "#include <omp.h>" line in
osra.cpp and add "-fopenmp" flag in the Makefile for both compiler and linker.
You will need to define environment variable OMP_NUM_THREADS to specify the number
of threads to run before using OSRA (osra.bat defines it as equal to 1 right now).

Install gcc and g++ 4.1 or later and pthreads-win32 libraries.
Edit libgomp.spec to read:
*Link_gomp: -lgomp -lpthread

Copy include files from pthreads-win32 to /mingw/include
Copy libpthreadGC2.a to /mingw/lib/libpthread.a
Copy pthreadGC2.dll and mingwm10.dll to the same directory as osra.exe
===============================================================
Known bugs:

- Some PDF files cause the program to crash. As a workaround you can
try to first convert such problematic files to PostScript by using pdf2ps from
Ghostscript installation or some other utility.

- OpenMP doesn't seem to work as expected (crashes, slowdowns or results different
from the serial version).




