
#include <iostream>

#include <stdlib.h>
#include <string.h>

extern "C" {
#include <pgm2asc.h>
}

using namespace std;

/* Actual max height is 12, but we leave some more for extensions: */
const char* TESTS[][50] = {
	/* These show where 0.45 is better */
	/* Test1: "3" is not detected */
	{
		"11111111111111",
		"11110000001111",
		"11100000000111",
		"11100100000011",
		"11111111000111",
		"11111111000111",
		"11111111000111",
		"11111111001111",
		"11111100001111",
		"11111000001111",
		"11111110000011",
		"11111111100001",
		"11111111100001",
		"11111111110001",
		"11111111100011",
		"11000111000011",
		"10000000000111",
		"10000000001111",
		"11100101111111"		
	},
	/* Test2: "3" is not detected */
	{
		"11111111111111",
		"11110000001111",
		"11100000000111",
		"11100100000011",
		"11111111000111",
		"11111111000111",
		"11111111000111",
		"11111111001111",
		"11111100001111",
		"11111000001111",
		"11111110000011",
		"11111111100001",
		"11111111100001",
		"11111111110001",
		"11111111100011",
		"11000111000011",
		"10000000000111",
		"10000000001111",
		"11100101111111",
		"11111111111111",
	},
	/* Test3: "3" is not detected */
	{
		"111111111111",
		"111000000111",
		"111000000011",
		"111000000001",
		"111111100001",
		"111111100001",
		"111111100011",
		"111111100011",
		"111111000011",
		"111110000011",
		"111111000001",
		"111111100000",
		"111111110000",
		"111111110001",
		"111111110001",
		"100011100001",
		"100000000011",
		"100000000111",
		"111000001111",
		"111111111111"
	},
	/* The rest show where 0.48 is better */
	/* Test4: nothing should be detected */
	{
		"11111111111111111111111",
		"11111111111111111111111",
		"11111111111111111111111",
		"11111111100100111111111",
		"11111111000000000111111",
		"11111111000000001111111",
		"11111111100000011111111",
		"11111111110000111111111",
		"11111111111000111111111",
		"01111111111000111111111",
		"01111111111000111111111",
		"01111111110000111111111",
		"00010000000000111111111",
		"00000000000000111111111",
		"00000000000000111111111",
		"01111111100000111111111",
		"01111111110000111111111",
		"01111111110000111111111",
		"11111111110000111111111",
		"11111111110000111111111",
		"11111111100000111111111",
		"11111111000000111111111",
		"11111110000000011111111"
	},
	/* Test5: "N" should be detected */
	{
		"111111111111111",
		"100001111100001",
		"110000111110000",
		"110000011110011",
		"110000011111011",
		"110001001110011",
		"110011000110011",
		"110011100010011",
		"110011110000011",
		"110011111000011",
		"110011111000011",
		"110011111100011",
		"100000111110011",
		"100001111110011",
		"111111111111111"
	}
};

job_t *JOB;

char run_test(int n) {
	int height = 0;
	int width = strlen(TESTS[n][0]);

	while (TESTS[n][height] != NULL) {
		height++;
	}

	const char** image = TESTS[n];

	cout << "Test " << n + 1 << ": width x height = " << width << "x" << height << endl;

	job_t job;

	job_init(&job);

	job.cfg.cfilter = (char *) "oOcCnNHFsSBuUgMeEXYZRPp23456789";
	job.src.p.x = width;
	job.src.p.y = height;
	job.src.p.bpp = 1;
	job.src.p.p = (unsigned char *) malloc(job.src.p.x * job.src.p.y);

	for (int row = 0; row < height; row++) {
		for (int col = 0; col < width; col++)
			job.src.p.p[row * width + col] = image[row][col] == '1' ? 255 : 0;
		}

	JOB = &job;

	try {
		pgm2asc(&job);
	} catch (...) {
	}

	char *l = (char *) job.res.linelist.start.next->data;

	char c = 0;

	if (l != NULL)
		c = l[0];

	if (isalnum(c)) {
		// Character recognition succeeded for GOCR:
		cout << "Found c=" << c << endl;
	} else {
		cout << "Failed c=" << c << endl;
	}
}

int main() {
	for (unsigned int n = 0; n < 5; n++) {
		run_test(n);
	}
}
